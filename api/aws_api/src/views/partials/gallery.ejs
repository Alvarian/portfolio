<div class="col-md-7">
	
	<div class="card card-body h-100" style="position: absolute;">
		<h2>Gallery</h2>
		
		<div class="overflow-auto d-flex flex-wrap">
			<% projects.forEach(function(project) { %>
				<div id="<%= project.id %>" class="card card-body col-sm-4 m-1 ">
					<img onclick="loadProjectIntoModalBox(<%= JSON.stringify(project) %>)" class="w-100" src="<%= project.icon_file %>" alt="icon">

					<div class="float-right">
						<i class="far fa-edit" onclick="loadProjectIntoPanel(<%= JSON.stringify(project) %>)"></i>
						<i class="far fa-trash-alt" onclick="confirmationPrompt(<%= JSON.stringify(project) %>)"></i>
					</div>	
				</div>
			<% }); %>
		</div>
	</div>

	<script>
		function loadProjectIntoModalBox({ title, deployed_url, game_file, style_file, slides }) {
			const cEl = (el) => document.createElement(el);

			if (slides) {
				$('#serviceModalTitle').empty().append(title);
				const slideShowContent = $('#slideShowContent');

				const makeSlideContent = (slide, pos) => {
					const { image_url, description } = slide;

					const followingSlides = cEl('div');
					followingSlides.setAttribute('class', 'carousel-item');

					const startSlideImg = cEl('img');
					startSlideImg.src = image_url;
					startSlideImg.style.height = '72vh';
					startSlideImg.setAttribute('class', "d-block w-100");
					followingSlides.append(startSlideImg);

					const startSlidePara = cEl('p');
					startSlidePara.innerText = description;
					followingSlides.append(startSlidePara);

					const slideButtonsContainer = cEl('div');
					slideButtonsContainer.setAttribute('class', 'd-flex justify-content-center slideEditButtons w-100');

					const editButton = cEl('i');
					editButton.setAttribute('class', 'far fa-edit');
					editButton.onclick = () => {
						editSlide(slide, title, slideShowContent);
					};
					slideButtonsContainer.append(editButton);

					const delButton = cEl('i');
					delButton.setAttribute('class', 'far fa-trash-alt');
					delButton.onclick = () => {
						deleteSlide(slide, title, slideShowContent, pos);
					};
					slideButtonsContainer.append(delButton);

					followingSlides.append(slideButtonsContainer);

					return followingSlides;
				};

				const slideEditButtonContainer = $('.slideEditButtons');

				const startingSlide = cEl('div');
				startingSlide.setAttribute('class', 'carousel-item active');

				const startSlideImg = cEl('img');
				startSlideImg.src = slides[0].image_url;
				startSlideImg.style.height = '72vh';
				startSlideImg.setAttribute('class', "d-block w-100");
				startingSlide.append(startSlideImg);

				const startSlidePara = cEl('p');
				startSlidePara.innerText = slides[0].description;
				startingSlide.append(startSlidePara);

				const slideButtonsContainer = cEl('div');
				slideButtonsContainer.setAttribute('class', 'd-flex justify-content-center slideEditButtons w-100');

				const editButton = cEl('i');
				editButton.setAttribute('class', 'far fa-edit');
				editButton.onclick = () => {
					editSlide(slides[0], title, slideShowContent);
				};
				slideButtonsContainer.append(editButton);

				const delButton = cEl('i');
				delButton.setAttribute('class', 'far fa-trash-alt');
				delButton.onclick = () => {
					deleteSlide(slides[0], title, slideShowContent, 0);
				};
				slideButtonsContainer.append(delButton);

				startingSlide.append(slideButtonsContainer);

				slideShowContent.empty();
				slideShowContent.append(startingSlide);

				for (let i = 1; i < slides.length; i++) {
					slideShowContent.append(makeSlideContent(slides[i], i));
				}

				$('#serviceDisplayModal').modal("show");

				return;
			}

			// if deployedUrl is true load iframe with aws link and return
			const appModalBody = document.getElementById('app');
			$('#appModalTitle').empty().append(title);
			
			if (deployed_url) {
				const iframe = cEl('iframe');
				const appTitle = $('#appModalTitle');

				iframe.setAttribute('src', deployed_url);
				iframe.setAttribute('class', 'w-100 h-100');

				appModalBody.innerHTML = '';
				appModalBody.appendChild(iframe);

				$('#appDisplay').modal("show");

				return;
			}

			// if not, create and load script element sourcing aws link as js
			// and call a global function and pass through modal body element to load content

			appModalBody.innerHTML = '';

			$.ajax({
		        url: game_file,
		        dataType: "script",
		        async: false,
		        success: function () {
		        	const styleFile = cEl('link');
		        	styleFile.setAttribute('rel', 'stylesheet');
		        	styleFile.setAttribute('href', style_file);
		        	styleFile.setAttribute('type', 'text/css');
		        	appModalBody.appendChild(styleFile);

		        	window.Game.start(appModalBody);
		        }
		    });

			$('#appDisplay').modal("show");
		}
 
		function confirmationPrompt({ id, title, game_file, icon_file, slides }) {
			const isConfirmed = confirm(`Are you sure you want to delete ${title}?`);

			// post request to delete
			if (isConfirmed) {
				$.ajax({
					type: "POST",
					url: `/portal/delete/${id}`,
					data: { title, game_file, slides, icon_file },
					success: data => window.location.href = '/portal'
				});
			}
		}

		function loadProjectIntoPanel({ id, title, description, deployed_url, game_file, git_url, style_file, icon_file }) {
			// load into fields
			clearPanel();

			panel.attr('action', `/portal/update/${id}`);

			panel[0][0].value = title;
			panel[0][1].value = description;
			panel[0][2].value = '';
			panel[0][5].value = git_url;

			fillIconUrlField(icon_file);

			// option: deployedUrl || gameFile && styleFile(S3)
			if (!deployed_url) {
				panel[0][3].value = '';

				changeTypeOption('is_game_file', { game_file, style_file });
			} else {
				panel[0][3].value = deployed_url; 

				changeTypeOption('is_deployed', null);
			}
		}
	</script>
</div>